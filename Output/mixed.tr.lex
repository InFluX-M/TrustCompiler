< type: T_Fn, line: 2, content: fn >
< type: T_Id, line: 2, content: calculate_max >
< type: T_LP, line: 2, content: ( >
< type: T_Id, line: 2, content: num1 >
< type: T_Colon, line: 2, content: : >
< type: T_Int, line: 2, content: i32 >
< type: T_Comma, line: 2, content: , >
< type: T_Id, line: 2, content: num2 >
< type: T_Colon, line: 2, content: : >
< type: T_Int, line: 2, content: i32 >
< type: T_RP, line: 2, content: ) >
< type: T_Arrow, line: 2, content: -> >
< type: T_Int, line: 2, content: i32 >
< type: T_LC, line: 2, content: { >
< type: T_If, line: 3, content: if >
< type: T_Id, line: 3, content: num1 >
< type: T_ROp_G, line: 3, content: > >
< type: T_Id, line: 3, content: num2 >
< type: T_LC, line: 3, content: { >
< type: T_Return, line: 4, content: return >
< type: T_Id, line: 4, content: num1 >
< type: T_Semicolon, line: 4, content: ; >
< type: T_RC, line: 5, content: } >
< type: T_Else, line: 5, content: else >
< type: T_LC, line: 5, content: { >
< type: T_Return, line: 6, content: return >
< type: T_Id, line: 6, content: num2 >
< type: T_Semicolon, line: 6, content: ; >
< type: T_RC, line: 7, content: } >
< type: T_RC, line: 8, content: } >
< type: T_Fn, line: 10, content: fn >
< type: T_Id, line: 10, content: process_array >
< type: T_LP, line: 10, content: ( >
< type: T_Id, line: 10, content: arr >
< type: T_Colon, line: 10, content: : >
< type: T_LB, line: 10, content: [ >
< type: T_Int, line: 10, content: i32 >
< type: T_Semicolon, line: 10, content: ; >
< type: T_Decimal, line: 10, content: 5 >
< type: T_RB, line: 10, content: ] >
< type: T_RP, line: 10, content: ) >
< type: T_LC, line: 10, content: { >
< type: T_Let, line: 11, content: let >
< type: T_Mut, line: 11, content: mut >
< type: T_Id, line: 11, content: sum_even >
< type: T_Colon, line: 11, content: : >
< type: T_Int, line: 11, content: i32 >
< type: T_Assign, line: 11, content: = >
< type: T_Decimal, line: 11, content: 0 >
< type: T_Semicolon, line: 11, content: ; >
< type: T_Let, line: 12, content: let >
< type: T_Mut, line: 12, content: mut >
< type: T_Id, line: 12, content: i >
< type: T_Colon, line: 12, content: : >
< type: T_Int, line: 12, content: i32 >
< type: T_Assign, line: 12, content: = >
< type: T_Decimal, line: 12, content: 0 >
< type: T_Semicolon, line: 12, content: ; >
< type: T_Loop, line: 13, content: loop >
< type: T_LC, line: 13, content: { >
< type: T_If, line: 14, content: if >
< type: T_Id, line: 14, content: i >
< type: T_ROp_GE, line: 14, content: >= >
< type: T_Decimal, line: 14, content: 5 >
< type: T_LC, line: 14, content: { >
< type: T_Break, line: 15, content: break >
< type: T_Semicolon, line: 15, content: ; >
< type: T_RC, line: 16, content: } >
< type: T_If, line: 17, content: if >
< type: T_Id, line: 17, content: arr >
< type: T_LB, line: 17, content: [ >
< type: T_Id, line: 17, content: i >
< type: T_RB, line: 17, content: ] >
< type: T_AOp_RM, line: 17, content: % >
< type: T_Decimal, line: 17, content: 2 >
< type: T_ROp_E, line: 17, content: == >
< type: T_Decimal, line: 17, content: 0 >
< type: T_LC, line: 17, content: { >
< type: T_Id, line: 18, content: sum_even >
< type: T_Assign, line: 18, content: = >
< type: T_Id, line: 18, content: sum_even >
< type: T_AOp_Trust, line: 18, content: + >
< type: T_Id, line: 18, content: arr >
< type: T_LB, line: 18, content: [ >
< type: T_Id, line: 18, content: i >
< type: T_RB, line: 18, content: ] >
< type: T_Semicolon, line: 18, content: ; >
< type: T_RC, line: 19, content: } >
< type: T_Id, line: 20, content: i >
< type: T_Assign, line: 20, content: = >
< type: T_Id, line: 20, content: i >
< type: T_AOp_Trust, line: 20, content: + >
< type: T_Decimal, line: 20, content: 1 >
< type: T_Semicolon, line: 20, content: ; >
< type: T_RC, line: 21, content: } >
< type: T_Print, line: 22, content: println! >
< type: T_LP, line: 22, content: ( >
< type: T_String, line: 22, content: "Sum of even numbers in array: {}." >
< type: T_Comma, line: 22, content: , >
< type: T_Id, line: 22, content: sum_even >
< type: T_RP, line: 22, content: ) >
< type: T_Semicolon, line: 22, content: ; >
< type: T_RC, line: 23, content: } >
< type: T_Fn, line: 25, content: fn >
< type: T_Id, line: 25, content: main >
< type: T_LP, line: 25, content: ( >
< type: T_RP, line: 25, content: ) >
< type: T_LC, line: 25, content: { >
< type: T_Let, line: 26, content: let >
< type: T_Id, line: 26, content: val1 >
< type: T_Colon, line: 26, content: : >
< type: T_Int, line: 26, content: i32 >
< type: T_Assign, line: 26, content: = >
< type: T_Decimal, line: 26, content: 15 >
< type: T_Semicolon, line: 26, content: ; >
< type: T_Let, line: 27, content: let >
< type: T_Id, line: 27, content: val2 >
< type: T_Colon, line: 27, content: : >
< type: T_Int, line: 27, content: i32 >
< type: T_Assign, line: 27, content: = >
< type: T_Decimal, line: 27, content: 25 >
< type: T_Semicolon, line: 27, content: ; >
< type: T_Let, line: 28, content: let >
< type: T_Id, line: 28, content: max_val >
< type: T_Assign, line: 28, content: = >
< type: T_Id, line: 28, content: calculate_max >
< type: T_LP, line: 28, content: ( >
< type: T_Id, line: 28, content: val1 >
< type: T_Comma, line: 28, content: , >
< type: T_Id, line: 28, content: val2 >
< type: T_RP, line: 28, content: ) >
< type: T_Semicolon, line: 28, content: ; >
< type: T_Print, line: 29, content: println! >
< type: T_LP, line: 29, content: ( >
< type: T_String, line: 29, content: "The maximum value is: {}." >
< type: T_Comma, line: 29, content: , >
< type: T_Id, line: 29, content: max_val >
< type: T_RP, line: 29, content: ) >
< type: T_Semicolon, line: 29, content: ; >
< type: T_Let, line: 31, content: let >
< type: T_Id, line: 31, content: my_nums >
< type: T_Colon, line: 31, content: : >
< type: T_LB, line: 31, content: [ >
< type: T_Int, line: 31, content: i32 >
< type: T_Semicolon, line: 31, content: ; >
< type: T_Decimal, line: 31, content: 5 >
< type: T_RB, line: 31, content: ] >
< type: T_Assign, line: 31, content: = >
< type: T_LB, line: 31, content: [ >
< type: T_Decimal, line: 31, content: 1 >
< type: T_Comma, line: 31, content: , >
< type: T_Decimal, line: 31, content: 2 >
< type: T_Comma, line: 31, content: , >
< type: T_Decimal, line: 31, content: 3 >
< type: T_Comma, line: 31, content: , >
< type: T_Decimal, line: 31, content: 4 >
< type: T_Comma, line: 31, content: , >
< type: T_Decimal, line: 31, content: 5 >
< type: T_RB, line: 31, content: ] >
< type: T_Semicolon, line: 31, content: ; >
< type: T_Id, line: 32, content: process_array >
< type: T_LP, line: 32, content: ( >
< type: T_Id, line: 32, content: my_nums >
< type: T_RP, line: 32, content: ) >
< type: T_Semicolon, line: 32, content: ; >
< type: T_If, line: 34, content: if >
< type: T_Id, line: 34, content: max_val >
< type: T_ROp_G, line: 34, content: > >
< type: T_Decimal, line: 34, content: 20 >
< type: T_LOp_AND, line: 34, content: && >
< type: T_LOp_NOT, line: 34, content: ! >
< type: T_False, line: 34, content: false >
< type: T_LC, line: 34, content: { >
< type: T_Print, line: 35, content: println! >
< type: T_LP, line: 35, content: ( >
< type: T_String, line: 35, content: "Max value is greater than 20!" >
< type: T_RP, line: 35, content: ) >
< type: T_Semicolon, line: 35, content: ; >
< type: T_RC, line: 36, content: } >
< type: T_Else, line: 36, content: else >
< type: T_LC, line: 36, content: { >
< type: T_Print, line: 37, content: println! >
< type: T_LP, line: 37, content: ( >
< type: T_String, line: 37, content: "Max value is 20 or less." >
< type: T_RP, line: 37, content: ) >
< type: T_Semicolon, line: 37, content: ; >
< type: T_RC, line: 38, content: } >
< type: T_RC, line: 39, content: } >
